#list all kubernetes resources and their shortforms
k api-resources

#get deployments in all namespaces
k get deployments -A

#label selectors
k get pods --selector env=dev,bu=tech

kubectl config set-context --current --namespace=pod-namespace #namespace
kubectl config set-context $(kubectl config current-context) --namespace=prod

k create secret generic my-secret --from-literal=user=bob --from-literal=password=123456
k create secret generic my-secret --from-file=somefile.properties
echo -n 'some string' | base64  #encode a string to base64
echo -n 'base64 encode string' | base64 --decode #decode the encoded string back

kubectl create sa my-serviceaccount
kubectl create role rbac-role --verb=get,watch --resource=pods,pods/status #ðŸ‘ˆðŸ‘ˆðŸ‘ˆCreate a Role (What and Where)
kubectl create rolebinding rbac-rolebinding --role=rbac-role --serviceaccount=rbac-namespace:rbac-sa #ðŸ‘ˆðŸ‘ˆðŸ‘ˆ Bind Account and Role
kubectl edit role rbac-role #ðŸ‘ˆðŸ‘ˆðŸ‘ˆ Edit the role
kubectl auth can-i get pods --as=system:serviceaccount:rbac-namespace:rbac-sa


k create deployment my-dployment --replicas=3 --image=nginx --port=80
k expose deployment my-deployment --port=8080 --target-port=80
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml ####ðŸ‘ˆðŸ‘ˆðŸ‘ˆCreate a Service named redis-service of type ClusterIP to expose pod    redis on port 6379####
kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml ####ðŸ‘ˆðŸ‘ˆðŸ‘ˆThis will not use the pods labels as selectors, instead it will assume selectors as app=redis. You cannot pass in selectors as an option. So it does not work very well if your pod has a different label set. So generate the file and modify the selectors before creating the service####
kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml ####ðŸ‘ˆðŸ‘ˆðŸ‘ˆCreate a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes: This will automatically use the pod's labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.######
kubectl edit deployment my-deployment

k get ep
k create svc nodeport my-svc --tcp=5678:8080
k set image deployment edit-deployment nginx=nginx:1.14.1
k scale deployment blue-deployment --replicas 7

kubectl [command] [TYPE] [NAME] -o <output_format> #<output_format>=json, name, wide, yaml

kubectl get pods --all-namespaces #get pods in all and any namespace.


kubectl explain pods --recursive | grep envFrom -A3

#creating an ingress resource imperitively
kubectl create ingress <ingress-name> --rule="host/path=service:port"
kubectl create ingress ingress-test --rule="wear.my-online-store.com/wear*=wear-service:80"

#kubectl convert plugin needs to be instaled prior to running this
kubectl convert -f <old-yml-file> --output-version <new-api-version>


#create taint on a node
kubectl taint nodes node1 key1=value1:NoSchedule

#remove taint
kubectl taint nodes node1 key1=value1:NoSchedule-

#add label to a node
kubectl label nodes <your-node-name> disktype=ssd

#top command
k top nodes
k top pods


#create job
k create job throw-dice-job --image=kodekloud/throw-dice


#create ingress
k create ingress my-ingress --rule="/pay=pay-service:8080"

######
command: ["/bin/sh"]
args: ["-c", "while true; do echo hello; sleep 10;done"]
